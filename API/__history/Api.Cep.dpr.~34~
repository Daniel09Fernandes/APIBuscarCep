program Api.Cep;

{$APPTYPE CONSOLE}
{$R *.res}

uses
  System.SysUtils,
  Horse,
  Busca.Cep.Controller in 'Controller\Busca.Cep.Controller.pas',
  System.Classes,
  System.SyncObjs,
  BuscaCep.Services in 'Services\BuscaCep.Services.pas',
  BuscaCep.Repository in 'Repository\BuscaCep.Repository.pas',
  Client.Socket in 'Modules\Client.Socket.pas',
  Busca.Cep.Apicep.Model in 'Model\Busca.Cep.Apicep.Model.pas',
  Busca.Cep.AwesomeApi.Model in 'Model\Busca.Cep.AwesomeApi.Model.pas',
  Busca.Cep.Viacep.Model in 'Model\Busca.Cep.Viacep.Model.pas';

var
  ServerThread: TThread;
  StopEvent: TEvent;

procedure StartServer;
begin
  Writeln('Horse listen on port:9000');
  Writeln('Server start!');
  TBuscaCepController.GetInstance.Rotas;
  THorse.Listen(9000);
end;

begin
  StopEvent := TEvent.Create(nil, True, False, '');
  try  //Necessario rodar dentro da thread, para liberar o terminal, e poder interagir, para parar o servidor horse
    ServerThread := TThread.CreateAnonymousThread(
      procedure
      begin
        StartServer;
      end);
    ServerThread.Start;

    //Colocando o terminal em espera de ação
    Writeln('Pressione alguma tecla para, parar o servidor...');
    Readln;
    StopEvent.SetEvent;  //Atualiza o evento
    THorse.StopListen;

    // Aguarde a thread do servidor terminar
    ServerThread.WaitFor;
  finally
    // Libera a controller da memoria
    TBuscaCepController.FreeInstance;

    StopEvent.Free;
    ServerThread.Free;
  end;

end.
