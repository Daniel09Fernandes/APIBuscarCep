unit TestBusca.Cep;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Horse,
  Busca.Cep.Controller,
  BuscaCep.Services,
  BuscaCep.Repository,
  StrUtils, sysUtils,
  REST.Client;

type
  // Daniel: Necessario iniciar a API, para realizar os testes

  TestTBuscaCepController = class(TTestCase)
  strict private
   FRest : TRESTClient;
   FRequest : TRESTRequest;
   FBuscaCepService : IBuscaCepServices;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TesteBuscaCep_viaAPI;
    procedure TesteBuscaCepInvalidoViaApi;
    procedure TesteBuscaCepServidorInvalidoViaApi;
  end;

implementation

procedure TestTBuscaCepController.SetUp;
begin
  FRest := TRESTClient.Create('');
  FRequest := TRESTRequest.Create(FRest);
  FRequest.Client := FRest;
  FBuscaCepService := TBuscaCepServices.Create(TBuscaCepRepository.Create);
end;

procedure TestTBuscaCepController.TearDown;
begin
  FRequest.Free;
  FRest.Free;
end;


procedure TestTBuscaCepController.TesteBuscaCep_viaAPI;
begin
  try
    FRest.BaseURL := 'http://localhost:9000/BuscarCep/12929-605';
    FRest.Accept := '*/*';
    FRest.AcceptCharset := 'utf-8';
    FRequest.Execute;

    var isOk := (FRequest.Response.StatusCode = 200) and
                           ( not FRequest.Response.JSONText.Trim.IsEmpty );
    Check(isOk);
  except
    on E:Exception do
    begin
      Check(false, E.Message);
    end;
  end;
end;


procedure TestTBuscaCepController.TesteBuscaCepInvalido;
begin
  try
    FRest.BaseURL := 'http://localhost:9000/BuscarCep/12929-69905';
    FRest.Accept := '*/*';
    FRest.AcceptCharset := 'utf-8';
    FRequest.Execute;

    var isOk := (FRequest.Response.StatusCode = 200) and
                             ( not FRequest.Response.JSONText.Trim.IsEmpty );
    Check(isOk, 'Teste OK: Cep invalido');
  except
    on E:Exception do
    begin
      Check(false, E.Message);
    end;
  end;
end;

procedure TestTBuscaCepController.TesteBuscaCepServidorInvalido;
begin
  FRest.BaseURL := 'http://localh:900/BuscarCep/12929-69905';
  FRest.Accept := '*/*';
  FRest.AcceptCharset := 'utf-8';
  try
    FRequest.Execute;
    check(true, 'Erro: Valor não pode ser positivo');
  except
     Check(false, 'Teste OK: Servidor invalido!');
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTBuscaCepController.Suite);
end.

