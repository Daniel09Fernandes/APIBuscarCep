unit TestBusca.Cep;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Horse,
  BuscaCep.Services,
  BuscaCep.Repository,
  StrUtils, sysUtils,
  Rest.Api.BuscaCep;

type
  // Daniel: Necessario iniciar a API, para realizar os testes

  TestTBuscaCepController = class(TTestCase)
  strict private
   FBuscaCepService : IBuscaCepServices;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    //Teste via services, isolando a API
    procedure TesteBuscaCepInvalidoViaServices;
    procedure TesteBuscaCepViaServices;
    //Necessario iniciar a Api.Cep.exe da pasta Bin
    procedure TesteBuscaCepViaAPI;
    procedure TesteBuscaCepInvalidoViaApi;
    procedure TesteBuscaCepServidorInvalidoViaApi;
  end;

implementation

procedure TestTBuscaCepController.SetUp;
begin
  FBuscaCepService := TBuscaCepServices.Create(TBuscaCepRepository.Create);
end;

procedure TestTBuscaCepController.TearDown;
begin
  FBuscaCepService := nil;
end;

procedure TestTBuscaCepController.TesteBuscaCepViaAPI;
begin
  try
   var Response := TRestApiBuscaCep.ExecutarRequisicao('12929-605');

    var isOk := (TRestApiBuscaCep.StatusCode = 200) and ( not Response.Trim.IsEmpty);
    Check(isOk);
  except
    on E:Exception do
    begin
      Check(false, E.Message);
    end;
  end;
end;


procedure TestTBuscaCepController.TesteBuscaCepViaServices;
begin
  Check(not FBuscaCepService.GetCep('12929-605').Trim.IsEmpty, 'Erro: Não conseguiu obter o cep');
end;

procedure TestTBuscaCepController.TesteBuscaCepInvalidoViaServices;
begin
  Check(not FBuscaCepService.GetCep('12929-69905').Trim.IsEmpty, 'Teste Ok: CepInvalido');
end;

procedure TestTBuscaCepController.TesteBuscaCepInvalidoViaApi;
begin
  try
    var Response := TRestApiBuscaCep.ExecutarRequisicao('12929-69905');

    var isOk := (TRestApiBuscaCep.StatusCode = 200) and ( not Response.Trim.IsEmpty);
    Check(isOk, 'Teste OK: Cep invalido');
  except
    on E:Exception do
    begin
      Check(false, E.Message);
    end;
  end;
end;

procedure TestTBuscaCepController.TesteBuscaCepServidorInvalidoViaApi;
begin
  try
     var Response := TRestApiBuscaCep.ExecutarRequisicao('12929-69905', 'http://Local:0/BuscaCep');
    check(true, 'Erro: Valor não pode ser positivo');
  except
     Check(false, 'Teste OK: Servidor invalido!');
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTBuscaCepController.Suite);
end.

